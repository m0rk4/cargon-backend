generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cargo {
  id       Int    @id(map: "PK_Cargo") @default(autoincrement())
  weight   Int    @db.SmallInt
  length   Int    @db.SmallInt
  width    Int    @db.SmallInt
  height   Int    @db.SmallInt
  name     String @db.VarChar(50)
  orderId  Int
  order    Order  @relation(fields: [orderId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Cargo_Order")
}

model City {
  id        Int         @id(map: "PK_City") @default(autoincrement()) @db.SmallInt
  name      String      @db.VarChar(50) @unique
  locations Location[]
}

model DriverApplication {
  id                    Int       @id(map: "PK_driver_application") @default(autoincrement())
  firstName             String    @db.VarChar(50)
  lastName              String    @db.VarChar(50)
  phoneNumber           String    @db.VarChar(15)
  email                 String    @db.VarChar(255)
  isApplicationApproved Boolean   @default(false)
  createdAt             DateTime  @db.Timestamp(6) @default(now())
  updatedAt             DateTime  @db.Timestamp(6) @default(now()) @updatedAt
}

model Location {
  id                                     Int      @id(map: "PK_Location") @default(autoincrement())
  cityId                                 Int      @db.SmallInt
  streetId                               Int      @db.SmallInt
  home                                   Int      @db.SmallInt
  city                                   City     @relation(fields: [cityId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Location_City")
  street                                 Street   @relation(fields: [streetId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Location_Street")
  orders_locationsToorders_fromLocation  Order[]  @relation("locationsToorders_fromLocation")
  orders_locationsToorders_toLocation    Order[]  @relation("locationsToorders_toLocation")

  @@unique([cityId, streetId, home], name: "UNQ_Location")
}

model Order {
  id               Int              @id(map: "PK_Order") @default(autoincrement())
  createdAt        DateTime         @db.Timestamp(6) @default(now())
  updatedAt        DateTime         @db.Timestamp(6) @default(now()) @updatedAt
  ownerId          Int
  fromLocationId   Int
  toLocationId     Int
  fromLocation     Location          @relation("locationsToorders_fromLocation", fields: [fromLocationId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_orders_locations_from")
  user             User              @relation(fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_orders_User")
  status           OrderStatus       @default(PENDING)
  toLocation       Location          @relation("locationsToorders_toLocation", fields: [toLocationId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_orders_locations_to")
  cargos           Cargo[]
  orderTransports  OrderTransport[]
}

enum OrderStatus {
    PENDING
    APPROVED
    DECLINED
}

model OrderTransport {
  orderId        Int
  transportId    Int
  actualDistance Int        @db.SmallInt
  order          Order      @relation(fields: [orderId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_OrderTransport_orders")
  transport      Vehicle    @relation(fields: [transportId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_OrderTransport_transports")

  @@id([orderId, transportId], map: "PK_OrderTransport")
}

enum Role {
    USER
}

model Street {
  id        Int         @id(map: "PK_Street") @default(autoincrement()) @db.SmallInt
  name      String      @db.VarChar(50) @unique
  locations Location[]
}

model TransportApplication {
  id            Int                         @id(map: "PK_TransportApplication") @default(autoincrement())
  driverId      Int
  documentUid   String                      @db.Uuid
  driver        User                        @relation(fields: [driverId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_TransportApplication_User")
  status        TransportApplicationStatus  @default(PENDING)
  createdAt     DateTime  @db.Timestamp(6)  @default(now())
  updatedAt     DateTime  @db.Timestamp(6)  @default(now()) @updatedAt
}

enum TransportApplicationStatus {
  PENDING
  CANCELLED
  APPROVED
}

model TransportType {
  id         Int          @id(map: "PK_TransportType") @default(autoincrement()) @db.SmallInt
  typeName   String       @db.VarChar(50)
  transports Vehicle[]
}

model Vehicle {
  id                  Int                 @id(map: "PK_Vehicles") @default(autoincrement())
  yearOfProduction    DateTime            @db.Date
  brand               String              @db.VarChar(50)
  model               String              @db.VarChar(50)
  registrationNumber  String              @db.VarChar(7)
  driverId            Int
  typeId              Int                 @db.SmallInt
  vin                 String              @db.VarChar(17)
  insuranceExpiryTs   DateTime            @db.Timestamp(6)
  user                User                @relation(fields: [driverId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Vehicle_User")
  transportType       TransportType       @relation(fields: [typeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Transport_TransportType")
  orderTransports     OrderTransport[]
  VehicleParameters   VehicleParameters?
}

model User {
  id                   Int                     @id(map: "PK_User") @default(autoincrement())
  firstName            String                  @db.VarChar(50)
  lastName             String                  @db.VarChar(50)
  email                String                  @db.VarChar(255)    @unique
  passwordHash         String                  @db.VarChar(24)
  createdAt            DateTime                @db.Timestamp(6)    @default(now())
  updatedAt            DateTime                @db.Timestamp(6)    @default(now()) @updatedAt
  userRating           Decimal                 @db.Decimal(3, 2)   @default(5.00)
  isActive             Boolean                 @default(true)
  role                 Role                    @default(USER)
  orders               Order[]
  transportApplication TransportApplication[]
  transports           Vehicle[]
}

model VehicleParameters {
  vehicleId  Int        @id(map: "PK_VehicleParameters") @default(autoincrement())
  width      Int        @db.SmallInt
  height     Int        @db.SmallInt
  length     Int        @db.SmallInt
  capacity   Int        @db.SmallInt
  mileage    Int        @db.SmallInt
  transport  Vehicle    @relation(fields: [vehicleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_VehicleParameters_Vehicle")
}